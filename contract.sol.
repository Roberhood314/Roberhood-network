pragma solidity ^0.8.0;

contract Roberhood {
    string public name = "Roberhood Coin";
    string public symbol = "RBC";
    uint256 public totalSupply = 1000000000 * 10 ** 18;
    mapping(address => uint256) public balanceOf;

    constructor() {
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _amount) public returns (bool) {
        require(balanceOf[msg.sender] >= _amount, "Insufficient balance");
        balanceOf[msg.sender] -= _amount;
        balanceOf[_to] += _amount;
        return true;
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract RoberhoodCoin is ERC20 {
    constructor(uint256 initialSupply) ERC20("Roberhood Coin", "RHC") {
        _mint(msg.sender, initialSupply * (10 ** decimals()));
    }
}
